pd_agg <- aggregate(Abundance~Sample+Family, pd_rarefy, sum)
#aggregate(ColumnX ~ ColumnY+ColumnZ,dataFrame,function), return a dataframe with three columns: X,Y,Z. The rest of columns are lost.
#Note that in "Family" there is no NA. The NAs are thrown away. 
pd_rarefy_noAb <- subset(pd_rarefy, select = -c(Abundance))
#Remove the Abundance and OTU column from pd_rarefy, otherwise in the merge if the Abundance is different it won't merge the row

pd_agg_m <- merge(pd_agg,pd_rarefy_noAb,all.x=TRUE)
#Merge the original dataFrame with the new dataFrame, all.x=TRUE will keep all column of X, or use "Family" and "Abundance" columns
#One problem is that in pd_rarefy_noAb, there are multiple rows with the same "Family" and "Abundance". We will have duplicate rows (different OTU)


pd_rarefy$Family_Sample <- paste (pd_rarefy$Family, "_", pd_rarefy$Sample)
require(dplyr)
pd_agg_family <-distinct(pd_agg_m, Family, Sample, .keep_all = TRUE)
#Remove the columns with the same "Family_Sample". 
#because of the genus and species info is no longer accurate, you can remove by pd_agg_f <-subset(pd_agg_family,select = -c(Genus, Species))

#For the phylum, you can create similar aggregated dataframe: 
pd_agg_p <- aggregate(Abundance~Sample+Phylum, pd_rarefy, sum)
pd_agg_pmerge<- merge(pd_agg_p,pd_rarefy_noAb,all.x=TRUE)
pd_agg_phylum <-distinct(pd_agg_pmerge, Phylum, Sample, .keep_all = TRUE)

