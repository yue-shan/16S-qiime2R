# create a coordination of the object "phylo". 
phylo_rarefy_unifrac_W <- ordinate(phylo, method="PCoA", 
                                  distance="unifrac", weighted=TRUE)
# ordinate is a function in phyloseq. 
# the default method is "DCA", where it also supports "CCA", "RDA", "CAP", "DPCoA", "NMDS", "MDS", "PCoA")
# the default distance is "bray", where you can do "unifrac", "dist" etc. 
# for unifrac, the default is unweighted, which won't account for the abundance and is more useful to detect rare species.
# Bray-Curtis dissimilarity creates a matrix in function of the how much the samples are different. Whereas the UniFrac measures the phylogenetic distance between sets of taxa in a phylogenetic tree as the fraction of the branch length of the tree that leads to descendants from either one environment.
# The distance is purely based on the tree, not taxonomy or sample data. If you update taxonomy or sample data you don't need to run this again. 
PCoA_unifrac_W <-
  plot_ordination(phylo, phylo_rarefy_unifrac_W,
                  color =  "Treatment",shape = "Source", axes=1:2) +
  geom_point(size = 3, alpha = 1) + 
  #ggtitle("fecal") +
  #scale_color_manual(values=c (taxa_palette_mg))  +
  scale_colour_viridis_d(begin = 0,end = 0.8,option = "plasma")+
  theme_q2r() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 12),
        axis.text = element_text(size = 12),
        axis.ticks = element_blank()) 
print(PCoA_unifrac_W)
#plot_ordination(phyloseq object,ordination object, type = "samples", axes = 1:2, color = NULL, shape = NULL, label = NULL, title = NULL)
#type could be others, e.g. "species", axes could be other components, e.g. 2:3.
#scale_colour_vividis_d()have from 0 - 1 value and that picks colours from the scale. 
#sample_data(phylo)$Source <- as.factor(sample_data(phylo)$Source)
#if "source" is numaric, need to change it to factor

PCoA_unifrac_W_wrap <- PCoA_unifrac_W + facet_wrap(~Source)+stat_ellipse()
#stat_ellipse will draw a circle around the cluster.facet_wrap make several PCoA graphs separating by one parameter.

#Side by side graph
require(gridExtra)
grid.arrange(PCoA_unifrac_W,  PCoA_unifrac_W_wrap, nrow=2)
